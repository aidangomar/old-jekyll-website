So you want to learn how to code. It's not that hard when you actually get up and running with it, but choosing a language is tough. If you're new to the programming world, there are a lot of languages to choose from. In a recent Lifehacker post (view it <a href="http://lifehacker.com/five-best-programming-languages-for-first-time-learners-1494256243">here</a>), they said that the top 5 languages to start with are Java, Ruby, C/C++, Python,  and JavaScript. I don't entirely agree with Lifehacker in terms of Java and C/C++. Those two languages aren't great, especially if you're not familiar with programming. Java is increasingly being supported less and less among browsers, and C/C++ can be a pain to learn. Ruby, Python, and JavaScript, are the easiest, as well as some of the most powerful today. People usually want to learn programming so that they can build their own app or website or just random script that does something awesome. If you ask me JavaScript is the way to go. It is the primary programming language of the web, and an extensive collection of libraries and APIs are coming out for it, allowing it to have various super powers that other languages would not be able to have. Python and Ruby are languages that for the most part, run on a server, or a desktop environment. They are great for writing server-side backends, and are great for learning the basics, but with JavaScript engines such as <a href="http://nodejs.org">Node.js</a>, writing server-side scripts with JavaScript is becoming a breeze. You can also learn the basics of programming with JavaScript, and it is also easier to run in the browser. JavaScript was my first programming language I learned, and I found it to be really awesome. JavaScript also pretty much runs on every device that has a web browser, so you can write apps that run on iPhones, Androids, and the web. So in the long run, JavaScript is a very simple, yet powerful language. There is one downside to it though, it isn't amazingly fast. Ruby and Python both outperform JavaScript in terms of computational speed (Python is capable of carrying out computations much faster than most languages anyway), but JavaScript is still fast enough to do a lot of interesting things. Well that's my whole talk on which language is better to start out with, but really its up to you. 
<br /><br />
It also depends what you want to build. In my case, I really wanted to build my own website, and initially I started with HTML, a simple language that makes up the code of a web page, and from there I learned JavaScript, to add interactivity, and other super powers to my pages. I also later learned CSS (the code that makes web pages look beautiful). Basically, if you want to become a web developer, you're going to need to learn HTML (skeleton of the webpage), CSS (icing on the cake), and JavaScript (the mastermind manipulating the various things on the page). If you decide you want to start by becoming a web developer, I would suggest checking out <a href="http://www.bentobox.io/">Bento</a>. Bento is a website which highlights all of the tools and languages you can use to make awesome apps. Not all of them are really necessary to build cool web apps, but if you're interesting in a sub-topic of web development, Bento will point you the tutorials to learn that skill. Also, <a href="http://www.codecademy.com">Codecademy</a>, would be a great place to learn some new programming skills. Codecademy has courses on Python, Ruby, JavaScript, PHP, Web development, API usage, and much more. Codecademy is useful if you want to learn how to build apps for the web or write scripts that run on a server, but what if you want to write apps mainly for the mobile side of things?
<br /><br />
If you want to code for the mobile world, there is not much I can really point you to in terms of learning an easy language. For iPhone (and Mac), the native programming language is Objective-C (a fairly complex object-oriented language), and the environment which Apple provides (Xcode), is fairly annoying to work with if you're new to coding. Android is a similar matter, the native language is Java (also fairly challenging and object-oriented), and has an equally as hard-to-use software development kit (SDK). Objective-C/Java are somewhat easier if you have experience with another language, such as JavaScript :-). If you have a little bit of experience with programming, definitely head over to <a href="http://makegameswith.us">MakeGamesWithUs</a>, they are basically a Codecademy but specializing in mobile game development. They simplify a lot of things for you, and have very clear tutorials on Objective-C, Xcode, mobile game-development, and if you publish through them, they'll even port your game to Android (no Java experience needed!). There is one other option, called <a href="http://www.phonegap.com/">PhoneGap</a>. PhoneGap basically packages your web apps into iPhone apps. But this comes at a cost. You have to sacrifice a sufficient amount of speed for PhoneGap, because JavaScript does not run very fast on mobile phones. This is why Objective-C is optmial for building native mobile apps, because it is so much faster, and is object oriented, allowing you to build better games and apps.<br /><br />
So you now know what you're going to need to learn mobile/web development. But you're missing one thing. A text editor! It is surprising how many people write code with horrible text editors. Do not use the stock text editors that come with your Mac or PC (such as TextEdit or Notepad), that's just a bad idea, especially when most of the best text editors are free, and simplify your life so much. Firstly, if you get a modern text editor, it will probably come with syntax highlighting, line numbers, and more code-editing goodies to make your code more legible. There are actually two really great code editors that come preinstalled on the Mac (and I think most Windows?), called Emacs and Vi (or Vim). Emacs and Vim can both be accessed via the command-line (Terminal on Mac). Simple type <code>emacs yourawesomefilename.html</code>, and it will automatically bring up the text editor. Syntax highlighting will be different depending on your file extension, but it is still awesome. Emacs doesn't work exactly like most other text editors (same with Vim), so you might want to do some reading on the commands <a href="http://www.ast.cam.ac.uk/~vasily/idl/emacs_commands_list.html">here</a>. You can create files the same way you did with Emacs for Vim. Simply type <code>vim yourawesomefilename.html</code>, and you can start editing from there. It also has different commands, so here is a <a href="http://www.cs.colostate.edu/helpdocs/vi.html">list</a>. Another option is to download <a href="http://www.sublimetext.com/">Sublime Text</a>, an extremely sophisticated code editor that runs as a desktop application. It works like a normal text editor (with normal commands), and is extremely useful. It is a good alternative to Emacs or Vim, if you're doing relatively simple stuff. Emacs and Vim are useful once you start writing stuff on servers (but that's later). Sublime Text does cost money, but the trial version is still quite nice.
<br /><br />
Well, now you have the tools, go make something awesome! Hopefully this post was helpful for you to pick a language and get set up with the right tools and tutorials. Let me know in the comments if you have any questions, opinions, or feedback.
